#!/usr/bin/env python
# -*- mode:python; coding:utf-8 -*-

import paramiko
import time
import sys
import json
import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd


def exec_ssh(ssh_hostname, ssh_cmd):
	SSH_USERNAME = "root"
	SSH_PASSWORD = "password"
	SSH_KEY_FILE = "/root/.ssh/id_rsa"

	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	ssh_stdin = ssh_stdout = ssh_stderr = None

	try:
	    #ssh.connect(SSH_ADDRESS, username=SSH_USERNAME, password=SSH_PASSWORD)
	    ssh.connect(hostname=ssh_hostname, port=22, username=SSH_USERNAME, key_filename=SSH_KEY_FILE)
	    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(ssh_cmd, timeout=None, bufsize=-1, get_pty=False, environment=None)
	except Exception as e:
	    sys.stderr.write("SSH connection error: {0}".format(e))

	output = ssh_stdout.read()

	return output

def draw_graph(input_G, layout="shell"):
    if layout=="shell":
        pos = nx.shell_layout(input_G)
    elif layout=="spring":
        pos = nx.spring_layout(input_G)
    elif layout=="spectral":
        pos = nx.spectral_layout(input_G)
    elif layout=="circular":
        pos = nx.circular_layout(input_G)
    elif layout=="random":
        pos = nx.random_layout(input_G)
    else:
        pos = nx.shell_layout(input_G)

    plt.figure()
    nx.draw_networkx_nodes(input_G, pos)
    nx.draw_networkx_edges(input_G, pos)
    nx.draw_networkx_labels(input_G, pos)
    nx.draw_networkx_edge_labels(input_G, pos)
    #plt.axis("off")

if __name__ == '__main__':

	result = []

	output_bridge = exec_ssh("pub-compute-001", "ovs-vsctl -f json list br")
	output_port = exec_ssh("pub-compute-001", "ovs-vsctl -f json list port")
	output_interface = exec_ssh("pub-compute-001", "ovs-vsctl -f json list interface")

	json_data_bridge = json.loads(output_bridge)
	json_data_interface = json.loads(output_interface)
	json_data_port = json.loads(output_port)

	for item_interface in json_data_interface['data']:

		if_uuid = item_interface[0][1]
		if_admin_state = item_interface[1]
		if_name = item_interface[26]
		if_type = item_interface[33]
		if_external_ids = item_interface[13][1]
		if_link_speed = item_interface[19]
		if_link_state = item_interface[20]
		if type(item_interface[24]) is list:
			if_mtu = None
		else:
			if_mtu = item_interface[24]
		if_ofport = item_interface[27]
		if_options = item_interface[29][1]
		if_other_config = item_interface[30][1]
		if_statistics = item_interface[31][1]
		if_status = item_interface[32][1]

		## OpenStack 정보 검색
		if_external_ids_attached_mac = if_external_ids_iface_id = if_external_ids_iface_status = if_external_ids_vm_uuid = None
		if len(if_external_ids) > 0:
			if_external_ids_attached_mac = if_external_ids[0][1]
			if_external_ids_iface_id = if_external_ids[1][1]
			if_external_ids_iface_status = if_external_ids[2][1]
			if len(if_external_ids) > 3:
				if_external_ids_vm_uuid = if_external_ids[3][1]

		## Interface가 속해 있는 Port 검색
		if_port_uuid = if_port_name = None
		for item_port in json_data_port['data']:
			if if_uuid == item_port[8][1]:
				if_port_uuid = item_port[0][1]
				if_port_name = item_port[11]
				break

		## Port가 속해 있는 Bridge 검색
		if_br_uuid = if_br_name = None
		if if_port_uuid:
			for item_bridge in json_data_bridge['data']:
				tmp_br_uuid = item_bridge[0][1]
				tmp_br_name = item_bridge[13]
				for port in item_bridge[16][1]:
					if if_port_uuid == port[1]:
						if_br_uuid = tmp_br_uuid
						if_br_name = tmp_br_name
						break

		result.append({
			"if_uuid": if_uuid,
			"if_name": if_name,
			"if_admin_state": if_admin_state,
			"if_name": if_name,
			"if_type": if_type,
			"if_external_ids_attached_mac": if_external_ids_attached_mac,
			"if_external_ids_iface_id": if_external_ids_iface_id,
			"if_external_ids_iface_status": if_external_ids_iface_status,
			"if_external_ids_vm_uuid": if_external_ids_vm_uuid,
			"if_link_speed": if_link_speed,
			"if_link_state": if_link_state,
			"if_mtu": if_mtu,
			"if_ofport": if_ofport,
			"if_options": if_options,
			"if_other_config": if_other_config,
			"if_statistics": if_statistics,
			"if_status": if_status,
			"if_port_uuid": if_port_uuid,
			"if_port_name": if_port_name,
			"if_br_uuid": if_br_uuid,
			"if_br_name": if_br_name
		})

	#print(result)

	G = nx.Graph()
	G.add_node(1)
	G.add_nodes_from([2, 3])

	G.add_edge(1, 2)
	e = (2, 3)
	G.add_edge(*e)
	G.add_edges_from([(1, 2), (1, 3)])

	print G.number_of_nodes()
	print G.number_of_edges()

	draw_graph(G)
	#plt.savefig("/var/www/html/test.png")
