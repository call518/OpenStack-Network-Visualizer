#!/usr/bin/env python
# -*- mode:python; coding:utf-8 -*-

import paramiko
import time
import sys
import json

import networkx as nx
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import pandas as pd


def exec_ssh(ssh_hostname, ssh_cmd):
	SSH_USERNAME = "root"
	SSH_PASSWORD = "password"
	SSH_KEY_FILE = "/root/.ssh/id_rsa"

	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	ssh_stdin = ssh_stdout = ssh_stderr = None

	try:
	    #ssh.connect(SSH_ADDRESS, username=SSH_USERNAME, password=SSH_PASSWORD)
	    ssh.connect(hostname=ssh_hostname, port=22, username=SSH_USERNAME, key_filename=SSH_KEY_FILE)
	    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(ssh_cmd, timeout=None, bufsize=-1, get_pty=False, environment=None)
	except Exception as e:
	    sys.stderr.write("SSH connection error: {0}".format(e))

	output = ssh_stdout.read()

	return output

if __name__ == '__main__':

	result = []

	output_bridge = exec_ssh("pub-compute-001", "ovs-vsctl -f json list br")
	output_port = exec_ssh("pub-compute-001", "ovs-vsctl -f json list port")
	output_interface = exec_ssh("pub-compute-001", "ovs-vsctl -f json list interface")

	json_data_bridge = json.loads(output_bridge)
	json_data_interface = json.loads(output_interface)
	json_data_port = json.loads(output_port)

	for item_interface in json_data_interface['data']:

		if_uuid = item_interface[0][1]
		if_admin_state = item_interface[1]
		if_name = item_interface[26]
		if_type = item_interface[33]
		if_external_ids = item_interface[13][1]
		if_link_speed = item_interface[19]
		if_link_state = item_interface[20]
		if type(item_interface[24]) is list:
			if_mtu = None
		else:
			if_mtu = item_interface[24]
		if_ofport = item_interface[27]
		if_options = item_interface[29][1]
		if_other_config = item_interface[30][1]
		if_statistics = item_interface[31][1]
		if_status = item_interface[32][1]

		## OpenStack 정보 검색
		if_external_ids_attached_mac = if_external_ids_iface_id = if_external_ids_iface_status = if_external_ids_vm_uuid = None
		if len(if_external_ids) > 0:
			if_external_ids_attached_mac = if_external_ids[0][1]
			if_external_ids_iface_id = if_external_ids[1][1]
			if_external_ids_iface_status = if_external_ids[2][1]
			if len(if_external_ids) > 3:
				if_external_ids_vm_uuid = if_external_ids[3][1]

		## Interface가 속해 있는 Port 검색
		if_port_uuid = if_port_name = None
		for item_port in json_data_port['data']:
			if if_uuid == item_port[8][1]:
				if_port_uuid = item_port[0][1]
				if_port_name = item_port[11]
				break

		## Port가 속해 있는 Bridge 검색
		if_br_uuid = if_br_name = None
		if if_port_uuid:
			for item_bridge in json_data_bridge['data']:
				tmp_br_uuid = item_bridge[0][1]
				tmp_br_name = item_bridge[13]
				for port in item_bridge[16][1]:
					if if_port_uuid == port[1]:
						if_br_uuid = tmp_br_uuid
						if_br_name = tmp_br_name
						break

		result.append({
			"if_uuid": if_uuid,
			"if_name": if_name,
			"if_admin_state": if_admin_state,
			"if_name": if_name,
			"if_type": if_type,
			"if_external_ids_attached_mac": if_external_ids_attached_mac,
			"if_external_ids_iface_id": if_external_ids_iface_id,
			"if_external_ids_iface_status": if_external_ids_iface_status,
			"if_external_ids_vm_uuid": if_external_ids_vm_uuid,
			"if_link_speed": if_link_speed,
			"if_link_state": if_link_state,
			"if_mtu": if_mtu,
			"if_ofport": if_ofport,
			"if_options": if_options,
			"if_other_config": if_other_config,
			"if_statistics": if_statistics,
			"if_status": if_status,
			"if_port_uuid": if_port_uuid,
			"if_port_name": if_port_name,
			"if_br_uuid": if_br_uuid,
			"if_br_name": if_br_name
		})

	#print(result)

#########################################################
#	G = nx.Graph()
#	G.add_node(1)
#	G.add_nodes_from([2, 3])
#
#	G.add_edge(1, 2)
#	e = (2, 3)
#	G.add_edge(*e)
#	G.add_edges_from([(1, 2), (1, 3)])
#
#	#print G.number_of_nodes()
#	#print G.number_of_edges()
#
#	#draw_graph(G)
#	f = plt.figure()
#	#nx.draw(G, ax=f.add_subplot(111))
#	nx.draw(G, with_labels=True)
#	f.savefig("/var/www/html/test.png")
#########################################################
#G = nx.Graph()
#
#G.add_edge('a', 'b', weight=0.6)
#G.add_edge('a', 'c', weight=0.2)
#G.add_edge('c', 'd', weight=0.1)
#G.add_edge('c', 'e', weight=0.7)
#G.add_edge('c', 'f', weight=0.9)
#G.add_edge('a', 'd', weight=0.3)
#
#elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d['weight'] > 0.5]
#esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d['weight'] <= 0.5]
#
#pos = nx.spring_layout(G)  # positions for all nodes
#
## nodes
#nx.draw_networkx_nodes(G, pos, node_size=700)
#
## edges
#nx.draw_networkx_edges(G, pos, edgelist=elarge,
#                       width=6)
#nx.draw_networkx_edges(G, pos, edgelist=esmall,
#                       width=6, alpha=0.5, edge_color='b', style='dashed')
#
## labels
#nx.draw_networkx_labels(G, pos, font_size=20, font_family='sans-serif')
#
#plt.figure(1)
#plt.axis('off')
#plt.savefig("/var/www/html/test.png")
#########################################################

	G = nx.Graph() 

	for interface in result:
		#print("if_name: %s (%s)" % (interface['if_name'], interface['if_uuid']))
		#print("  if_port_name: %s (%s)" % (interface['if_port_name'], interface['if_port_uuid']))
		#print("  if_br_name: %s (%s)" % (interface['if_br_name'], interface['if_br_uuid']))

		if_uuid = interface['if_name']

		G.add_node(if_uuid,
			if_uuid = interface['if_uuid'],
			if_admin_state = interface['if_admin_state'],
			if_type = interface['if_type'],
			if_external_ids_attached_mac = interface['if_external_ids_attached_mac'],
			if_external_ids_iface_id = interface['if_external_ids_iface_id'],
			if_external_ids_iface_status = interface['if_external_ids_iface_status'],
			if_external_ids_vm_uuid = interface['if_external_ids_vm_uuid'],
			if_link_speed = interface['if_link_speed'],
			if_link_state = interface['if_link_state'],
			if_mtu = interface['if_mtu'],
			if_ofport = interface['if_ofport'],
			if_options = interface['if_options'],
			if_other_config = interface['if_other_config'],
			if_statistics = interface['if_statistics'],
			if_status = interface['if_status'],
			if_port_uuid = interface['if_port_uuid'],
			if_port_name = interface['if_port_name'],
			if_br_uuid = interface['if_br_uuid'],
			if_br_name = interface['if_br_name']
		)
		G.add_edge(interface['if_name'], interface['if_port_name'])
		G.add_edge(interface['if_port_name'], interface['if_br_name'])
		#break

	#print(G.nodes.data())
	#print(G.nodes())
	print(G.edges())

	#pos = nx.shell_layout(G)  # positions for all nodes
	#pos = nx.spring_layout(G)  # positions for all nodes
	#pos = nx.spectral_layout(G)  # positions for all nodes
	#pos = nx.circular_layout(G)  # positions for all nodes
	pos = nx.random_layout(G)  # positions for all nodes

	#nx.draw_networkx_nodes(G, pos, node_size=700, node_shape='o', node_color='b', alpha=0.5, label=nx.get_node_attributes(G, 'if_name'))
	nx.draw_networkx_nodes(G, pos, with_labels=True, node_size=500, node_shape='o', node_color='skyblue', alpha=0.5, linewidths=1)

	nx.draw_networkx_labels(G, pos, font_size=5, font_family='sans-serif')

	nx.draw_networkx_edges(G, pos, width=1, alpha=0.5)

	plt.axis('off')

	#plt.figure(figsize = (10,9))

	plt.savefig("/var/www/html/test.png", format = "png", dpi = 600)
